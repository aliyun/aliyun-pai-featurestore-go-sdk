// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fdbserverfb

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type KKVData struct {
	_tab flatbuffers.Table
}

func GetRootAsKKVData(buf []byte, offset flatbuffers.UOffsetT) *KKVData {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &KKVData{}
	x.Init(buf, n+offset)
	return x
}

func FinishKKVDataBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsKKVData(buf []byte, offset flatbuffers.UOffsetT) *KKVData {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &KKVData{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedKKVDataBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *KKVData) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *KKVData) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *KKVData) Pk() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *KKVData) Sk() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *KKVData) EventTimestamp() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *KKVData) MutateEventTimestamp(n int64) bool {
	return rcv._tab.MutateInt64Slot(8, n)
}

func (rcv *KKVData) PlayTime() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *KKVData) MutatePlayTime(n float64) bool {
	return rcv._tab.MutateFloat64Slot(10, n)
}

func (rcv *KKVData) Value(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *KKVData) ValueLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *KKVData) ValueBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *KKVData) MutateValue(j int, n byte) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateByte(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

func KKVDataStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func KKVDataAddPk(builder *flatbuffers.Builder, pk flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(pk), 0)
}
func KKVDataAddSk(builder *flatbuffers.Builder, sk flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(sk), 0)
}
func KKVDataAddEventTimestamp(builder *flatbuffers.Builder, eventTimestamp int64) {
	builder.PrependInt64Slot(2, eventTimestamp, 0)
}
func KKVDataAddPlayTime(builder *flatbuffers.Builder, playTime float64) {
	builder.PrependFloat64Slot(3, playTime, 0.0)
}
func KKVDataAddValue(builder *flatbuffers.Builder, value flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(value), 0)
}
func KKVDataStartValueVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func KKVDataEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
